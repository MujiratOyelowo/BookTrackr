{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kDCAA,EAAA,EAAA,cACA,EAAA,EAAA,sBACA,EAAA,EAAA,Y,E,E,c,C,GAGA,SAAS,gBAAgB,CAAC,mBAAoB,KAE1C,IAAM,EAAW,SAAS,cAAc,CAAC,YACnC,EAAW,SAAS,cAAc,CAAC,YACnC,EAAY,SAAS,cAAc,CAAC,aACpC,EAAc,SAAS,cAAc,CAAC,eAGtC,EAAY,SAAS,cAAc,CAAC,aACpC,EAAW,SAAS,cAAc,CAAC,YACnC,EAAgB,SAAS,aAAa,CAAC,cAGvC,EAAc,SAAS,cAAc,CAAC,eACtC,EAAmB,SAAS,cAAc,CAAC,iBAC3C,EAAkB,SAAS,cAAc,CAAC,gBAG5C,EAAgB,KAChB,EAAsB,KAmB1B,eAAe,EAAQ,CAAK,CAAE,CAAM,CAAE,CAAK,CAAE,CAAM,EAC/C,GAAI,CACA,IAAM,EAAS,MAAM,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,AAAA,CAAA,EAAA,EAAA,UAAS,AAAT,EAAW,EAAA,EAAC,CAAG,SAAU,CAAE,MAAA,EAAO,OAAA,EAAQ,MAAA,EAAO,OAAA,CAAO,GACpF,AAAA,CAAA,EAAA,EAAA,OAAE,AAAF,EAAI,IAAI,CAAC,sBAAuB,EAAO,EAAE,EACzC,GACJ,CAAE,MAAO,EAAO,CACZ,AAAA,CAAA,EAAA,EAAA,OAAE,AAAF,EAAI,KAAK,CAAC,qBAAsB,EACpC,CACJ,CAGA,eAAe,IACX,EAAS,SAAS,CAAG,GACrB,GAAI,CACA,IAAM,EAAkB,AAAA,CAAA,EAAA,EAAA,UAAS,AAAT,EAAW,EAAA,EAAE,CAAE,SAEjC,EAAQ,AADO,CAAA,MAAM,AAAA,CAAA,EAAA,EAAA,OAAM,AAAN,EAAQ,EAAnC,EAC2B,IAAI,CAAC,GAAG,CAAC,AAAA,GAAQ,CAAA,CAAE,GAAI,EAAI,EAAE,CAAE,GAAG,EAAI,IAAI,EAAE,AAAC,CAAA,GACxE,QAAQ,GAAG,CAAC,GACZ,EAAM,OAAO,CAAC,AAAA,GAAQ,EAAY,GACtC,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,uBAAwB,EAC1C,CACJ,CAGA,SAAS,EAAY,CAAI,EACrB,IAAM,EAAK,SAAS,aAAa,CAAC,KAClC,CAAA,EAAG,SAAS,CAAG;AACG,0BAAA,EAAE,EAAK,KAAK,CAAC,aAAa,EAAE,EAAK,MAAM,CAAC,EAAE,EAAE,EAAK,KAAK,CAAC,UAAG,EAAE,EAAK,MAAM,CAAC;AACpD,8CAAA,EAAE,EAAK,EAAE,CAAC;AACR,gDAAA,EAAE,EAAK,EAAE,CAAC;AAClD,QAAA,CAAC,CACD,EAAS,WAAW,CAAC,EACzB,CAGA,eAAe,EAAW,CAAM,EAC5B,GAAI,CACA,MAAM,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,AAAA,CAAA,EAAA,EAAA,GAAG,AAAH,EAAI,EAAA,EAAE,CAAE,QAAS,IACjC,QAAQ,GAAG,CAAC,gBAAiB,GAC7B,GACJ,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,uBAAwB,EAC1C,CACJ,CAGA,eAAe,EAAS,CAAM,EAC1B,GAAI,CACA,IAAM,EAAS,AAAA,CAAA,EAAA,EAAA,GAAG,AAAH,EAAI,EAAA,EAAC,CAAG,QAAS,GAC1B,EAAU,MAAM,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,GAC7B,GAAI,EAAQ,MAAM,GAAI,CAClB,IAAM,EAAW,EAAQ,IAAI,GAC7B,EAAgB,EAEhB,SAAS,cAAc,CAAC,aAAa,KAAK,CAAG,EAAS,KAAK,CAC3D,SAAS,cAAc,CAAC,cAAc,KAAK,CAAG,EAAS,MAAM,CAC7D,SAAS,cAAc,CAAC,aAAa,KAAK,CAAG,EAAS,KAAK,CAC3D,SAAS,cAAc,CAAC,cAAc,KAAK,CAAG,EAAS,MAAM,CAE7D,EAAU,KAAK,CAAC,OAAO,CAAG,OAC9B,MACI,QAAQ,GAAG,CAAC,sBAEpB,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,gCAAiC,EACnD,CACJ,CAqEA,eAAe,IACX,IAAM,EAAa,EAAU,KAAK,CAAC,WAAW,GACxC,EAAgB,EAAY,KAAK,CACvC,GAAI,CACA,IAAM,EAAkB,AAAA,CAAA,EAAA,EAAA,UAAS,AAAT,EAAW,EAAA,EAAE,CAAE,SAGjC,EAAgB,AADR,AADO,CAAA,MAAM,AAAA,CAAA,EAAA,EAAA,OAAM,AAAN,EAAQ,EAAnC,EAC2B,IAAI,CAAC,GAAG,CAAC,AAAA,GAAQ,CAAA,CAAE,GAAI,EAAI,EAAE,CAAE,GAAG,EAAI,IAAI,EAAE,AAAC,CAAA,GAC5C,MAAM,CAAC,AAAA,IAC/B,IAAM,EAAgB,EAAK,KAAK,CAAC,WAAW,GAAG,QAAQ,CAAC,IAAe,EAAK,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC,GACpG,EAAe,CAAA,GAAgB,EAAK,KAAK,GAAK,EACpD,OAAO,GAAiB,CAC5B,EACA,CAAA,EAAS,SAAS,CAAG,GACrB,EAAc,OAAO,CAAC,AAAA,GAAQ,EAAY,GAC9C,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,yBAA0B,EAC5C,CACJ,CAzKA,EAAc,gBAAgB,CAAC,QAAS,KACpC,EAAU,KAAK,CAAC,OAAO,CAAG,MAC9B,GAGA,OAAO,gBAAgB,CAAC,QAAS,AAAC,IAC1B,EAAM,MAAM,GAAK,GACjB,CAAA,EAAU,KAAK,CAAC,OAAO,CAAG,MAD9B,EAII,EAAM,MAAM,GAAK,GACjB,CAAA,EAAY,KAAK,CAAC,OAAO,CAAG,MADhC,CAGJ,GAyEA,EAAS,gBAAgB,CAAC,SAAU,MAAO,IACvC,EAAE,cAAc,GAChB,IAAM,EAAe,SAAS,cAAc,CAAC,aAAa,KAAK,CAAC,IAAI,GAC9D,EAAgB,SAAS,cAAc,CAAC,cAAc,KAAK,CAAC,IAAI,GAChE,EAAe,SAAS,cAAc,CAAC,aAAa,KAAK,CACzD,EAAgB,SAAS,cAAc,CAAC,cAAc,KAAK,CACjE,GAAI,CACA,IAAM,EAAS,AAAA,CAAA,EAAA,EAAA,GAAG,AAAH,EAAI,EAAA,EAAC,CAAG,QAAS,EAChC,OAAM,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,EAAQ,CACpB,MAAO,EACP,OAAQ,EACR,MAAO,EACP,OAAQ,CACZ,GACA,QAAQ,GAAG,CAAC,gBAAiB,GAC7B,EAAU,KAAK,CAAC,OAAO,CAAG,OAC1B,GACJ,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,uBAAwB,EAC1C,CACJ,GAGA,EAAS,gBAAgB,CAAC,SAAU,AAAC,IACjC,EAAE,cAAc,GAEhB,IAAM,EAAQ,SAAS,cAAc,CAAC,SAAS,KAAK,CAAC,IAAI,GACnD,EAAS,SAAS,cAAc,CAAC,UAAU,KAAK,CAAC,IAAI,GACrD,EAAQ,SAAS,cAAc,CAAC,SAAS,KAAK,CAC9C,EAAS,SAAS,cAAc,CAAC,UAAU,KAAK,CAClD,GAAS,GAAU,GAAS,IAC5B,EAAQ,EAAO,EAAQ,EAAO,GAC9B,EAAS,KAAK,GAEtB,GAGA,EAAS,gBAAgB,CAAC,QAAS,AAAC,IAC5B,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,eAE5B,EAAsB,EAAE,MAAM,CAAC,YAAY,CAAC,WAC5C,EAAY,KAAK,CAAC,OAAO,CAAG,SACrB,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,aAEnC,EADe,EAAE,MAAM,CAAC,YAAY,CAAC,WAG7C,GAGA,EAAiB,gBAAgB,CAAC,QAAS,KACnC,IACA,EAAW,GACX,EAAsB,MAE1B,EAAY,KAAK,CAAC,OAAO,CAAG,MAChC,GAEA,EAAgB,gBAAgB,CAAC,QAAS,KACtC,EAAsB,KACtB,EAAY,KAAK,CAAC,OAAO,CAAG,MAChC,GAGA,EAAU,gBAAgB,CAAC,QAAS,GACpC,EAAY,gBAAgB,CAAC,SAAU,GAsBvC,GACJ,GAEA,AAAA,CAAA,EAAA,EAAA,OAAE,AAAF,EAAI,IAAI,CAAC,uBACT,AAAA,CAAA,EAAA,EAAA,OAAE,AAAF,EAAI,KAAK,CAAC,yBACV,AAAA,CAAA,EAAA,EAAA,OAAE,AAAF,EAAI,KAAK,CAAC,oB,E,C,a,Q,qB,Q,S,Q,iD,O,E,C,Q,C,S,C,C,C,C,C,C,C,MCtMO,EAAA,EAST,WAIJ,IAAI,EAAO,WAAY,EACnB,EAAgB,YAChB,EAAO,OAAQ,SAAW,GAAmB,OAAO,OAAO,SAAS,GAAK,GACzE,kBAAkB,IAAI,CAAC,OAAO,SAAS,CAAC,SAAS,EAGjD,EAAa,CACb,QACA,QACA,OACA,OACA,QACH,CAEG,EAAiB,CAAC,EAClB,EAAgB,KAGpB,SAAS,EAAW,CAAG,CAAE,CAAU,EAC/B,IAAI,EAAS,CAAG,CAAC,EAAW,CAC5B,GAAI,AAAuB,YAAvB,OAAO,EAAO,IAAI,CAClB,OAAO,EAAO,IAAI,CAAC,GAEnB,GAAI,CACA,OAAO,SAAS,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAQ,EAChD,CAAE,MAAO,EAAG,CAER,OAAO,WACH,OAAO,SAAS,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAQ,CAAC,EAAK,UAAU,CAClE,CACJ,CAER,CAGA,SAAS,IACD,QAAQ,GAAG,GACP,QAAQ,GAAG,CAAC,KAAK,CACjB,QAAQ,GAAG,CAAC,KAAK,CAAC,QAAS,WAG3B,SAAS,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAE,CAAC,QAAS,UAAU,GAGpE,QAAQ,KAAK,EAAE,QAAQ,KAAK,EACpC,CAwBA,SAAS,IAKL,IAAK,IAHD,EAAQ,IAAI,CAAC,QAAQ,GAGhB,EAAI,EAAG,EAAI,EAAW,MAAM,CAAE,IAAK,CACxC,IAAI,EAAa,CAAU,CAAC,EAAE,AAC9B,CAAA,IAAI,CAAC,EAAW,CAAG,EAAK,EACpB,EACA,IAAI,CAAC,aAAa,CAAC,EAAY,EAAO,IAAI,CAAC,IAAI,CACvD,CAMA,GAHA,IAAI,CAAC,GAAG,CAAG,IAAI,CAAC,KAAK,CAGjB,OAAO,UAAY,GAAiB,EAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,CAC9D,MAAO,kCAEf,CAIA,SAAS,EAAgC,CAAU,EAC/C,OAAO,WACC,OAAO,UAAY,IACnB,EAAsB,IAAI,CAAC,IAAI,EAC/B,IAAI,CAAC,EAAW,CAAC,KAAK,CAAC,IAAI,CAAE,WAErC,CACJ,CAIA,SAAS,EAAqB,CAAU,CAAE,CAAM,CAAE,CAAW,MAtDzC,EAwDhB,MAAO,AAvDY,WADH,EAwDE,IAtDd,CAAA,EAAa,KADjB,EAIA,AAAI,OAAO,UAAY,IAEZ,AAAe,UAAf,GAA0B,EAC1B,EACA,AAAwB,KAAA,IAAxB,OAAO,CAAC,EAAW,CACnB,EAAW,QAAS,GACpB,AAAgB,KAAA,IAAhB,QAAQ,GAAG,CACX,EAAW,QAAS,OAEpB,IA2CJ,EAAgC,KAAK,CAAC,IAAI,CAAE,UACvD,CAEA,SAAS,EAAO,CAAI,CAAE,CAAO,EAE3B,IASI,EAMA,EAMA,EArBA,EAAO,IAAI,CAuBX,EAAa,WAyBjB,SAAS,IACL,IAAI,EAEJ,GAAI,OAAO,SAAW,GAAkB,GAExC,GAAI,CACA,EAAc,OAAO,YAAY,CAAC,EAAW,AACjD,CAAE,MAAO,EAAQ,CAAC,CAGlB,GAAI,OAAO,IAAgB,EACvB,GAAI,CACA,IAAI,EAAS,OAAO,QAAQ,CAAC,MAAM,CAC/B,EAAa,mBAAmB,GAChC,EAAW,EAAO,OAAO,CAAC,EAAa,IAC1B,CAAA,KAAb,GACA,CAAA,EAAc,WAAW,IAAI,CACzB,EAAO,KAAK,CAAC,EAAW,EAAW,MAAM,CAAG,GAC/C,CAAC,EAAE,AAAF,CAEV,CAAE,MAAO,EAAQ,CAAC,CAQtB,OAJiC,KAAA,IAA7B,EAAK,MAAM,CAAC,EAAY,EACxB,CAAA,EAAc,KAAA,CADlB,EAIO,EACX,CAiBA,SAAS,EAAe,CAAK,EACzB,IAAI,EAAQ,EAIZ,GAHqB,UAAjB,OAAO,GAAsB,AAAqC,KAAA,IAArC,EAAK,MAAM,CAAC,EAAM,WAAW,GAAG,EAC7D,CAAA,EAAQ,EAAK,MAAM,CAAC,EAAM,WAAW,GAAG,AAAH,EAErC,AAAiB,UAAjB,OAAO,GAAsB,GAAS,GAAK,GAAS,EAAK,MAAM,CAAC,MAAM,CACtE,OAAO,CAEP,OAAM,AAAI,UAAU,6CAA+C,EAE3E,CAhFI,AAAgB,UAAhB,OAAO,EACT,GAAc,IAAM,EACK,UAAhB,OAAO,GAChB,CAAA,EAAa,KAAA,CADR,EAsFP,EAAK,IAAI,CAAG,EAEZ,EAAK,MAAM,CAAG,CAAE,MAAS,EAAG,MAAS,EAAG,KAAQ,EAAG,KAAQ,EACvD,MAAS,EAAG,OAAU,CAAC,EAE3B,EAAK,aAAa,CAAG,GAAW,EAEhC,EAAK,QAAQ,CAAG,kBACZ,AAAI,AAAa,MAAb,EACK,EACE,AAAgB,MAAhB,EACF,EAEA,CAEb,EAEA,EAAK,QAAQ,CAAG,SAAU,CAAK,CAAE,CAAO,EAOpC,OANA,EAAY,EAAe,GACX,CAAA,IAAZ,GACA,AAtGR,SAAgC,CAAQ,EACpC,IAAI,EAAa,AAAA,CAAA,CAAU,CAAC,EAAS,EAAI,QAAA,EAAU,WAAW,GAE9D,GAAI,OAAO,SAAW,GAAkB,GAGxC,GAAI,CACA,OAAO,YAAY,CAAC,EAAW,CAAG,EAClC,MACJ,CAAE,MAAO,EAAQ,CAAC,CAGlB,GAAI,CACA,OAAO,QAAQ,CAAC,MAAM,CACpB,mBAAmB,GAAc,IAAM,EAAY,GACzD,CAAE,MAAO,EAAQ,CAAC,EACtB,EAsF+B,GAIpB,EAAsB,IAAI,CAAC,EACtC,EAEA,EAAK,eAAe,CAAG,SAAU,CAAK,EAClC,EAAe,EAAe,GACzB,KACD,EAAK,QAAQ,CAAC,EAAO,CAAA,EAE7B,EAEA,EAAK,UAAU,CAAG,WACd,EAAY,KACZ,AArEJ,WACI,GAAI,OAAO,SAAW,GAAkB,GAGxC,GAAI,CACA,OAAO,YAAY,CAAC,UAAU,CAAC,EACnC,CAAE,MAAO,EAAQ,CAAC,CAGlB,GAAI,CACA,OAAO,QAAQ,CAAC,MAAM,CACpB,mBAAmB,GAAc,0CACvC,CAAE,MAAO,EAAQ,CAAC,EACtB,IAyDI,EAAsB,IAAI,CAAC,EAC/B,EAEA,EAAK,SAAS,CAAG,SAAS,CAAO,EAC7B,EAAK,QAAQ,CAAC,EAAK,MAAM,CAAC,KAAK,CAAE,EACrC,EAEA,EAAK,UAAU,CAAG,SAAS,CAAO,EAC9B,EAAK,QAAQ,CAAC,EAAK,MAAM,CAAC,MAAM,CAAE,EACtC,EAEA,EAAK,OAAO,CAAG,WAMX,GALI,IAAkB,GAClB,CAAA,EAAiB,EAAe,EAAc,QAAQ,GAD1D,EAGA,EAAsB,IAAI,CAAC,GAEvB,IAAkB,EAClB,IAAK,IAAI,KAAa,EACpB,CAAc,CAAC,EAAU,CAAC,OAAO,EAG3C,EAGA,EAAiB,EACb,EAAgB,EAAc,QAAQ,GAAK,QAE/C,IAAI,EAAe,GACC,OAAhB,GACA,CAAA,EAAY,EAAe,EAD/B,EAGA,EAAsB,IAAI,CAAC,EAC7B,CAUA,AAFA,CAAA,EAAgB,IAAI,CAFnB,EAIa,SAAS,CAAG,SAAmB,CAAI,EAC7C,GAAI,AAAiB,UAAjB,OAAQ,GAAqB,AAAgB,UAAhB,OAAO,GAAsB,AAAS,KAAT,EAC1D,MAAM,AAAI,UAAU,kDAGxB,IAAI,EAAS,CAAc,CAAC,EAAK,CAOjC,OANK,GACD,CAAA,EAAS,CAAc,CAAC,EAAK,CAAG,IAAI,EAChC,EACA,EAAc,aAAa,CAAA,EAG5B,CACX,EAGA,IAAI,EAAO,OAAQ,SAAW,EAAiB,OAAO,GAAG,CAAG,KAAA,EAiB5D,OAhBA,EAAc,UAAU,CAAG,WAMvB,OALI,OAAO,SAAW,GACf,OAAO,GAAG,GAAK,GAClB,CAAA,OAAO,GAAG,CAAG,CAFjB,EAKO,CACX,EAEA,EAAc,UAAU,CAAG,WACvB,OAAO,CACX,EAGA,EAAc,OAAU,CAAG,EAEpB,CACX,EA5VQ,AAAkB,YAAlB,OAAO,QAAyB,OAAO,GAAG,CAC1C,OAAO,GAC8B,EAAO,OAAO,CACnD,EAAO,OAAO,CAAG,IAEjB,AAEN,IAAI,CAFO,GAAG,CAAG,G,E,C,E,E,C,Q,C,Q","sources":["<anon>","assets/scripts/script.js","node_modules/loglevel/lib/loglevel.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"gPU7b\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nvar _firebase = require(\"./firebase\");\nvar _firestore = require(\"firebase/firestore\");\nvar _loglevel = require(\"loglevel\");\nvar _loglevelDefault = parcelHelpers.interopDefault(_loglevel);\n// Wait for the DOM to be fully loaded\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    // Select DOM elements for main functionality\n    const bookForm = document.getElementById(\"bookForm\");\n    const bookList = document.getElementById(\"bookList\");\n    const searchBar = document.getElementById(\"searchBar\");\n    const filterGenre = document.getElementById(\"filterGenre\");\n    // Modal elements for editing\n    const editModal = document.getElementById(\"editModal\");\n    const editForm = document.getElementById(\"editForm\");\n    const closeModalBtn = document.querySelector(\".close-btn\");\n    // Modal elements for delete confirmation\n    const deleteModal = document.getElementById(\"deleteModal\");\n    const confirmDeleteBtn = document.getElementById(\"confirmDelete\");\n    const cancelDeleteBtn = document.getElementById(\"cancelDelete\");\n    // Variable to store the current book id being edited or deleted\n    let currentBookId = null;\n    let currentDeleteBookId = null;\n    // Close edit modal when the close button is clicked\n    closeModalBtn.addEventListener(\"click\", ()=>{\n        editModal.style.display = \"none\";\n    });\n    // Optional: Close edit modal when clicking outside the modal content\n    window.addEventListener(\"click\", (event)=>{\n        if (event.target === editModal) editModal.style.display = \"none\";\n        // Also hide delete modal if clicking outside its content\n        if (event.target === deleteModal) deleteModal.style.display = \"none\";\n    });\n    // 🌟 Function to Add a Book\n    async function addBook(title, author, genre, rating) {\n        try {\n            const docRef = await (0, _firestore.addDoc)((0, _firestore.collection)((0, _firebase.db), \"books\"), {\n                title,\n                author,\n                genre,\n                rating\n            });\n            (0, _loglevelDefault.default).info(\"Book added with ID:\", docRef.id);\n            loadBooks(); // Refresh book list\n        } catch (error) {\n            (0, _loglevelDefault.default).error(\"Error adding book:\", error);\n        }\n    }\n    // 🌟 Function to Fetch Books from Firebase\n    async function loadBooks() {\n        bookList.innerHTML = \"\"; // Clear list before loading\n        try {\n            const booksCollection = (0, _firestore.collection)((0, _firebase.db), \"books\");\n            const bookSnapshot = await (0, _firestore.getDocs)(booksCollection);\n            const books = bookSnapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            console.log(books);\n            books.forEach((book)=>displayBook(book));\n        } catch (error) {\n            console.error(\"Error loading books:\", error);\n        }\n    }\n    // 🌟 Function to Display a Book in the UI\n    function displayBook(book) {\n        const li = document.createElement(\"li\");\n        li.innerHTML = `\n            <span><strong>${book.title}</strong> by ${book.author} (${book.genre}) \\u{2B50}${book.rating}</span>\n            <button class=\"edit-btn\" data-id=\"${book.id}\">Edit</button>\n            <button class=\"delete-btn\" data-id=\"${book.id}\">Delete</button>\n        `;\n        bookList.appendChild(li);\n    }\n    // 🌟 Function to Delete a Book\n    async function deleteBook(bookId) {\n        try {\n            await (0, _firestore.deleteDoc)((0, _firestore.doc)((0, _firebase.db), \"books\", bookId));\n            console.log(\"Book deleted:\", bookId);\n            loadBooks(); // Refresh book list\n        } catch (error) {\n            console.error(\"Error deleting book:\", error);\n        }\n    }\n    // 🌟 Function to Open the Edit Modal for a Book\n    async function editBook(bookId) {\n        try {\n            const docRef = (0, _firestore.doc)((0, _firebase.db), \"books\", bookId);\n            const docSnap = await (0, _firestore.getDoc)(docRef);\n            if (docSnap.exists()) {\n                const bookData = docSnap.data();\n                currentBookId = bookId;\n                // Populate modal form with existing book data\n                document.getElementById(\"editTitle\").value = bookData.title;\n                document.getElementById(\"editAuthor\").value = bookData.author;\n                document.getElementById(\"editGenre\").value = bookData.genre;\n                document.getElementById(\"editRating\").value = bookData.rating;\n                // Show the modal\n                editModal.style.display = \"block\";\n            } else console.log(\"Book doesn't exist!\");\n        } catch (error) {\n            console.error(\"Error fetching book for edit:\", error);\n        }\n    }\n    // 🌟 Handle Modal Edit Form Submission\n    editForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        const updatedTitle = document.getElementById(\"editTitle\").value.trim();\n        const updatedAuthor = document.getElementById(\"editAuthor\").value.trim();\n        const updatedGenre = document.getElementById(\"editGenre\").value;\n        const updatedRating = document.getElementById(\"editRating\").value;\n        try {\n            const docRef = (0, _firestore.doc)((0, _firebase.db), \"books\", currentBookId);\n            await (0, _firestore.updateDoc)(docRef, {\n                title: updatedTitle,\n                author: updatedAuthor,\n                genre: updatedGenre,\n                rating: updatedRating\n            });\n            console.log(\"Book updated:\", currentBookId);\n            editModal.style.display = \"none\";\n            loadBooks();\n        } catch (error) {\n            console.error(\"Error updating book:\", error);\n        }\n    });\n    // 🌟 Handle Form Submission for Adding a Book\n    bookForm.addEventListener(\"submit\", (e)=>{\n        e.preventDefault(); // Prevent page reload\n        // Get form values\n        const title = document.getElementById(\"title\").value.trim();\n        const author = document.getElementById(\"author\").value.trim();\n        const genre = document.getElementById(\"genre\").value;\n        const rating = document.getElementById(\"rating\").value;\n        if (title && author && genre && rating) {\n            addBook(title, author, genre, rating);\n            bookForm.reset(); // Clear form fields\n        }\n    });\n    // 🌟 Handle Book Deletion and Editing (Event Delegation) for the book list\n    bookList.addEventListener(\"click\", (e)=>{\n        if (e.target.classList.contains(\"delete-btn\")) {\n            // Instead of immediately deleting, show the delete confirmation modal\n            currentDeleteBookId = e.target.getAttribute(\"data-id\");\n            deleteModal.style.display = \"block\";\n        } else if (e.target.classList.contains(\"edit-btn\")) {\n            const bookId = e.target.getAttribute(\"data-id\");\n            editBook(bookId);\n        }\n    });\n    // 🌟 Delete Confirmation Modal Handlers\n    confirmDeleteBtn.addEventListener(\"click\", ()=>{\n        if (currentDeleteBookId) {\n            deleteBook(currentDeleteBookId);\n            currentDeleteBookId = null;\n        }\n        deleteModal.style.display = \"none\";\n    });\n    cancelDeleteBtn.addEventListener(\"click\", ()=>{\n        currentDeleteBookId = null;\n        deleteModal.style.display = \"none\";\n    });\n    // 🌟 Handle Search & Filter\n    searchBar.addEventListener(\"input\", filterBooks);\n    filterGenre.addEventListener(\"change\", filterBooks);\n    async function filterBooks() {\n        const searchText = searchBar.value.toLowerCase();\n        const selectedGenre = filterGenre.value;\n        try {\n            const booksCollection = (0, _firestore.collection)((0, _firebase.db), \"books\");\n            const bookSnapshot = await (0, _firestore.getDocs)(booksCollection);\n            const books = bookSnapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            const filteredBooks = books.filter((book)=>{\n                const matchesSearch = book.title.toLowerCase().includes(searchText) || book.author.toLowerCase().includes(searchText);\n                const matchesGenre = selectedGenre ? book.genre === selectedGenre : true;\n                return matchesSearch && matchesGenre;\n            });\n            bookList.innerHTML = \"\"; // Clear list before filtering\n            filteredBooks.forEach((book)=>displayBook(book));\n        } catch (error) {\n            console.error(\"Error filtering books:\", error);\n        }\n    }\n    // 🌟 Load Books on Page Load\n    loadBooks();\n});\n(0, _loglevelDefault.default).info(\"Application started\");\n(0, _loglevelDefault.default).debug(\"Debugging information\");\n(0, _loglevelDefault.default).error(\"An error occurred\");\n\n},{\"./firebase\":\"6JwWS\",\"firebase/firestore\":\"59KHr\",\"loglevel\":\"5ZY8d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"5ZY8d\":[function(require,module,exports,__globalThis) {\n/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/ (function(root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) define(definition);\n    else if (0, module.exports) module.exports = definition();\n    else root.log = definition();\n})(this, function() {\n    \"use strict\";\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n    var _loggersByName = {};\n    var defaultLogger = null;\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') return method.bind(obj);\n        else try {\n            return Function.prototype.bind.call(method, obj);\n        } catch (e) {\n            // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n            return function() {\n                return Function.prototype.apply.apply(method, [\n                    obj,\n                    arguments\n                ]);\n            };\n        }\n    }\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) console.log.apply(console, arguments);\n            else // In old IE, native console methods themselves don't have apply().\n            Function.prototype.apply.apply(console.log, [\n                console,\n                arguments\n            ]);\n        }\n        if (console.trace) console.trace();\n    }\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') methodName = 'log';\n        if (typeof console === undefinedType) return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        else if (methodName === 'trace' && isIE) return traceForIE;\n        else if (console[methodName] !== undefined) return bindMethod(console, methodName);\n        else if (console.log !== undefined) return bindMethod(console, 'log');\n        else return noop;\n    }\n    // These private functions always need `this` to be set properly\n    function replaceLoggingMethods() {\n        /*jshint validthis:true */ var level = this.getLevel();\n        // Replace the actual methods.\n        for(var i = 0; i < logMethods.length; i++){\n            var methodName = logMethods[i];\n            this[methodName] = i < level ? noop : this.methodFactory(methodName, level, this.name);\n        }\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n        // Return any important warnings.\n        if (typeof console === undefinedType && level < this.levels.SILENT) return \"No console available for logging\";\n    }\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName) {\n        return function() {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, _level, _loggerName) {\n        /*jshint validthis:true */ return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n    function Logger(name, factory) {\n        // Private instance variables.\n        var self = this;\n        /**\n       * The level inherited from a parent logger (or a global default). We\n       * cache this here rather than delegating to the parent so that it stays\n       * in sync with the actual logging methods that we have installed (the\n       * parent could change levels but we might not have rebuilt the loggers\n       * in this child yet).\n       * @type {number}\n       */ var inheritedLevel;\n        /**\n       * The default level for this logger, if any. If set, this overrides\n       * `inheritedLevel`.\n       * @type {number|null}\n       */ var defaultLevel;\n        /**\n       * A user-specific level for this logger. If set, this overrides\n       * `defaultLevel`.\n       * @type {number|null}\n       */ var userLevel;\n        var storageKey = \"loglevel\";\n        if (typeof name === \"string\") storageKey += \":\" + name;\n        else if (typeof name === \"symbol\") storageKey = undefined;\n        function persistLevelIfPossible(levelNum) {\n            var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n            if (typeof window === undefinedType || !storageKey) return;\n            // Use localStorage if available\n            try {\n                window.localStorage[storageKey] = levelName;\n                return;\n            } catch (ignore) {}\n            // Use session cookie as fallback\n            try {\n                window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n            } catch (ignore) {}\n        }\n        function getPersistedLevel() {\n            var storedLevel;\n            if (typeof window === undefinedType || !storageKey) return;\n            try {\n                storedLevel = window.localStorage[storageKey];\n            } catch (ignore) {}\n            // Fallback to cookies if local storage gives us nothing\n            if (typeof storedLevel === undefinedType) try {\n                var cookie = window.document.cookie;\n                var cookieName = encodeURIComponent(storageKey);\n                var location = cookie.indexOf(cookieName + \"=\");\n                if (location !== -1) storedLevel = /^([^;]+)/.exec(cookie.slice(location + cookieName.length + 1))[1];\n            } catch (ignore) {}\n            // If the stored level is not valid, treat it as if nothing was stored.\n            if (self.levels[storedLevel] === undefined) storedLevel = undefined;\n            return storedLevel;\n        }\n        function clearPersistedLevel() {\n            if (typeof window === undefinedType || !storageKey) return;\n            // Use localStorage if available\n            try {\n                window.localStorage.removeItem(storageKey);\n            } catch (ignore) {}\n            // Use session cookie as fallback\n            try {\n                window.document.cookie = encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n            } catch (ignore) {}\n        }\n        function normalizeLevel(input) {\n            var level = input;\n            if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) level = self.levels[level.toUpperCase()];\n            if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) return level;\n            else throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\n        }\n        /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */ self.name = name;\n        self.levels = {\n            \"TRACE\": 0,\n            \"DEBUG\": 1,\n            \"INFO\": 2,\n            \"WARN\": 3,\n            \"ERROR\": 4,\n            \"SILENT\": 5\n        };\n        self.methodFactory = factory || defaultMethodFactory;\n        self.getLevel = function() {\n            if (userLevel != null) return userLevel;\n            else if (defaultLevel != null) return defaultLevel;\n            else return inheritedLevel;\n        };\n        self.setLevel = function(level, persist) {\n            userLevel = normalizeLevel(level);\n            if (persist !== false) persistLevelIfPossible(userLevel);\n            // NOTE: in v2, this should call rebuild(), which updates children.\n            return replaceLoggingMethods.call(self);\n        };\n        self.setDefaultLevel = function(level) {\n            defaultLevel = normalizeLevel(level);\n            if (!getPersistedLevel()) self.setLevel(level, false);\n        };\n        self.resetLevel = function() {\n            userLevel = null;\n            clearPersistedLevel();\n            replaceLoggingMethods.call(self);\n        };\n        self.enableAll = function(persist) {\n            self.setLevel(self.levels.TRACE, persist);\n        };\n        self.disableAll = function(persist) {\n            self.setLevel(self.levels.SILENT, persist);\n        };\n        self.rebuild = function() {\n            if (defaultLogger !== self) inheritedLevel = normalizeLevel(defaultLogger.getLevel());\n            replaceLoggingMethods.call(self);\n            if (defaultLogger === self) for(var childName in _loggersByName)_loggersByName[childName].rebuild();\n        };\n        // Initialize all the internal levels.\n        inheritedLevel = normalizeLevel(defaultLogger ? defaultLogger.getLevel() : \"WARN\");\n        var initialLevel = getPersistedLevel();\n        if (initialLevel != null) userLevel = normalizeLevel(initialLevel);\n        replaceLoggingMethods.call(self);\n    }\n    /*\n     *\n     * Top-level API\n     *\n     */ defaultLogger = new Logger();\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"symbol\" && typeof name !== \"string\" || name === \"\") throw new TypeError(\"You must supply a name when creating a logger.\");\n        var logger = _loggersByName[name];\n        if (!logger) logger = _loggersByName[name] = new Logger(name, defaultLogger.methodFactory);\n        return logger;\n    };\n    // Grab the current global log variable in case of overwrite\n    var _log = typeof window !== undefinedType ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType && window.log === defaultLogger) window.log = _log;\n        return defaultLogger;\n    };\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n    return defaultLogger;\n});\n\n},{}]},[\"gPU7b\"], \"gPU7b\", \"parcelRequire94c2\")\n\n//# sourceMappingURL=index.ee2f23a5.js.map\n","import { db } from \"./firebase\";\r\nimport { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, getDoc } from \"firebase/firestore\";\r\nimport log from \"loglevel\"\r\n\r\n// Wait for the DOM to be fully loaded\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    // Select DOM elements for main functionality\r\n    const bookForm = document.getElementById(\"bookForm\");\r\n    const bookList = document.getElementById(\"bookList\");\r\n    const searchBar = document.getElementById(\"searchBar\");\r\n    const filterGenre = document.getElementById(\"filterGenre\");\r\n\r\n    // Modal elements for editing\r\n    const editModal = document.getElementById(\"editModal\");\r\n    const editForm = document.getElementById(\"editForm\");\r\n    const closeModalBtn = document.querySelector(\".close-btn\");\r\n\r\n    // Modal elements for delete confirmation\r\n    const deleteModal = document.getElementById(\"deleteModal\");\r\n    const confirmDeleteBtn = document.getElementById(\"confirmDelete\");\r\n    const cancelDeleteBtn = document.getElementById(\"cancelDelete\");\r\n\r\n    // Variable to store the current book id being edited or deleted\r\n    let currentBookId = null;\r\n    let currentDeleteBookId = null;\r\n\r\n    // Close edit modal when the close button is clicked\r\n    closeModalBtn.addEventListener(\"click\", () => {\r\n        editModal.style.display = \"none\";\r\n    });\r\n\r\n    // Optional: Close edit modal when clicking outside the modal content\r\n    window.addEventListener(\"click\", (event) => {\r\n        if (event.target === editModal) {\r\n            editModal.style.display = \"none\";\r\n        }\r\n        // Also hide delete modal if clicking outside its content\r\n        if (event.target === deleteModal) {\r\n            deleteModal.style.display = \"none\";\r\n        }\r\n    });\r\n\r\n    // 🌟 Function to Add a Book\r\n    async function addBook(title, author, genre, rating) {\r\n        try {\r\n            const docRef = await addDoc(collection(db, \"books\"), { title, author, genre, rating });\r\n            log.info(\"Book added with ID:\", docRef.id);\r\n            loadBooks(); // Refresh book list\r\n        } catch (error) {\r\n            log.error(\"Error adding book:\", error);\r\n        }\r\n    }\r\n\r\n    // 🌟 Function to Fetch Books from Firebase\r\n    async function loadBooks() {\r\n        bookList.innerHTML = \"\"; // Clear list before loading\r\n        try {\r\n            const booksCollection = collection(db, \"books\");\r\n            const bookSnapshot = await getDocs(booksCollection);\r\n            const books = bookSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            console.log(books);\r\n            books.forEach(book => displayBook(book));\r\n        } catch (error) {\r\n            console.error(\"Error loading books:\", error);\r\n        }\r\n    }\r\n\r\n    // 🌟 Function to Display a Book in the UI\r\n    function displayBook(book) {\r\n        const li = document.createElement(\"li\");\r\n        li.innerHTML = `\r\n            <span><strong>${book.title}</strong> by ${book.author} (${book.genre}) ⭐${book.rating}</span>\r\n            <button class=\"edit-btn\" data-id=\"${book.id}\">Edit</button>\r\n            <button class=\"delete-btn\" data-id=\"${book.id}\">Delete</button>\r\n        `;\r\n        bookList.appendChild(li);\r\n    }\r\n\r\n    // 🌟 Function to Delete a Book\r\n    async function deleteBook(bookId) {\r\n        try {\r\n            await deleteDoc(doc(db, \"books\", bookId));\r\n            console.log(\"Book deleted:\", bookId);\r\n            loadBooks(); // Refresh book list\r\n        } catch (error) {\r\n            console.error(\"Error deleting book:\", error);\r\n        }\r\n    }\r\n\r\n    // 🌟 Function to Open the Edit Modal for a Book\r\n    async function editBook(bookId) {\r\n        try {\r\n            const docRef = doc(db, \"books\", bookId);\r\n            const docSnap = await getDoc(docRef);\r\n            if (docSnap.exists()) {\r\n                const bookData = docSnap.data();\r\n                currentBookId = bookId;\r\n                // Populate modal form with existing book data\r\n                document.getElementById(\"editTitle\").value = bookData.title;\r\n                document.getElementById(\"editAuthor\").value = bookData.author;\r\n                document.getElementById(\"editGenre\").value = bookData.genre;\r\n                document.getElementById(\"editRating\").value = bookData.rating;\r\n                // Show the modal\r\n                editModal.style.display = \"block\";\r\n            } else {\r\n                console.log(\"Book doesn't exist!\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching book for edit:\", error);\r\n        }\r\n    }\r\n\r\n    // 🌟 Handle Modal Edit Form Submission\r\n    editForm.addEventListener(\"submit\", async (e) => {\r\n        e.preventDefault();\r\n        const updatedTitle = document.getElementById(\"editTitle\").value.trim();\r\n        const updatedAuthor = document.getElementById(\"editAuthor\").value.trim();\r\n        const updatedGenre = document.getElementById(\"editGenre\").value;\r\n        const updatedRating = document.getElementById(\"editRating\").value;\r\n        try {\r\n            const docRef = doc(db, \"books\", currentBookId);\r\n            await updateDoc(docRef, {\r\n                title: updatedTitle,\r\n                author: updatedAuthor,\r\n                genre: updatedGenre,\r\n                rating: updatedRating\r\n            });\r\n            console.log(\"Book updated:\", currentBookId);\r\n            editModal.style.display = \"none\";\r\n            loadBooks();\r\n        } catch (error) {\r\n            console.error(\"Error updating book:\", error);\r\n        }\r\n    });\r\n\r\n    // 🌟 Handle Form Submission for Adding a Book\r\n    bookForm.addEventListener(\"submit\", (e) => {\r\n        e.preventDefault(); // Prevent page reload\r\n        // Get form values\r\n        const title = document.getElementById(\"title\").value.trim();\r\n        const author = document.getElementById(\"author\").value.trim();\r\n        const genre = document.getElementById(\"genre\").value;\r\n        const rating = document.getElementById(\"rating\").value;\r\n        if (title && author && genre && rating) {\r\n            addBook(title, author, genre, rating);\r\n            bookForm.reset(); // Clear form fields\r\n        }\r\n    });\r\n\r\n    // 🌟 Handle Book Deletion and Editing (Event Delegation) for the book list\r\n    bookList.addEventListener(\"click\", (e) => {\r\n        if (e.target.classList.contains(\"delete-btn\")) {\r\n            // Instead of immediately deleting, show the delete confirmation modal\r\n            currentDeleteBookId = e.target.getAttribute(\"data-id\");\r\n            deleteModal.style.display = \"block\";\r\n        } else if (e.target.classList.contains(\"edit-btn\")) {\r\n            const bookId = e.target.getAttribute(\"data-id\");\r\n            editBook(bookId);\r\n        }\r\n    });\r\n\r\n    // 🌟 Delete Confirmation Modal Handlers\r\n    confirmDeleteBtn.addEventListener(\"click\", () => {\r\n        if (currentDeleteBookId) {\r\n            deleteBook(currentDeleteBookId);\r\n            currentDeleteBookId = null;\r\n        }\r\n        deleteModal.style.display = \"none\";\r\n    });\r\n\r\n    cancelDeleteBtn.addEventListener(\"click\", () => {\r\n        currentDeleteBookId = null;\r\n        deleteModal.style.display = \"none\";\r\n    });\r\n\r\n    // 🌟 Handle Search & Filter\r\n    searchBar.addEventListener(\"input\", filterBooks);\r\n    filterGenre.addEventListener(\"change\", filterBooks);\r\n\r\n    async function filterBooks() {\r\n        const searchText = searchBar.value.toLowerCase();\r\n        const selectedGenre = filterGenre.value;\r\n        try {\r\n            const booksCollection = collection(db, \"books\");\r\n            const bookSnapshot = await getDocs(booksCollection);\r\n            const books = bookSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            const filteredBooks = books.filter(book => {\r\n                const matchesSearch = book.title.toLowerCase().includes(searchText) || book.author.toLowerCase().includes(searchText);\r\n                const matchesGenre = selectedGenre ? book.genre === selectedGenre : true;\r\n                return matchesSearch && matchesGenre;\r\n            });\r\n            bookList.innerHTML = \"\"; // Clear list before filtering\r\n            filteredBooks.forEach(book => displayBook(book));\r\n        } catch (error) {\r\n            console.error(\"Error filtering books:\", error);\r\n        }\r\n    }\r\n\r\n    // 🌟 Load Books on Page Load\r\n    loadBooks();\r\n});\r\n\r\nlog.info(\"Application started\");\r\nlog.debug(\"Debugging information\");\r\nlog.error(\"An error occurred\");\r\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    var _loggersByName = {};\n    var defaultLogger = null;\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods() {\n        /*jshint validthis:true */\n        var level = this.getLevel();\n\n        // Replace the actual methods.\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, this.name);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n\n        // Return any important warnings.\n        if (typeof console === undefinedType && level < this.levels.SILENT) {\n            return \"No console available for logging\";\n        }\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, _level, _loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, factory) {\n      // Private instance variables.\n      var self = this;\n      /**\n       * The level inherited from a parent logger (or a global default). We\n       * cache this here rather than delegating to the parent so that it stays\n       * in sync with the actual logging methods that we have installed (the\n       * parent could change levels but we might not have rebuilt the loggers\n       * in this child yet).\n       * @type {number}\n       */\n      var inheritedLevel;\n      /**\n       * The default level for this logger, if any. If set, this overrides\n       * `inheritedLevel`.\n       * @type {number|null}\n       */\n      var defaultLevel;\n      /**\n       * A user-specific level for this logger. If set, this overrides\n       * `defaultLevel`.\n       * @type {number|null}\n       */\n      var userLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var cookieName = encodeURIComponent(storageKey);\n                  var location = cookie.indexOf(cookieName + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(\n                          cookie.slice(location + cookieName.length + 1)\n                      )[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      function normalizeLevel(input) {\n          var level = input;\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              return level;\n          } else {\n              throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\n          }\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          if (userLevel != null) {\n            return userLevel;\n          } else if (defaultLevel != null) {\n            return defaultLevel;\n          } else {\n            return inheritedLevel;\n          }\n      };\n\n      self.setLevel = function (level, persist) {\n          userLevel = normalizeLevel(level);\n          if (persist !== false) {  // defaults to true\n              persistLevelIfPossible(userLevel);\n          }\n\n          // NOTE: in v2, this should call rebuild(), which updates children.\n          return replaceLoggingMethods.call(self);\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = normalizeLevel(level);\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          userLevel = null;\n          clearPersistedLevel();\n          replaceLoggingMethods.call(self);\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      self.rebuild = function () {\n          if (defaultLogger !== self) {\n              inheritedLevel = normalizeLevel(defaultLogger.getLevel());\n          }\n          replaceLoggingMethods.call(self);\n\n          if (defaultLogger === self) {\n              for (var childName in _loggersByName) {\n                _loggersByName[childName].rebuild();\n              }\n          }\n      };\n\n      // Initialize all the internal levels.\n      inheritedLevel = normalizeLevel(\n          defaultLogger ? defaultLogger.getLevel() : \"WARN\"\n      );\n      var initialLevel = getPersistedLevel();\n      if (initialLevel != null) {\n          userLevel = normalizeLevel(initialLevel);\n      }\n      replaceLoggingMethods.call(self);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    defaultLogger = new Logger();\n\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n            throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n            logger = _loggersByName[name] = new Logger(\n                name,\n                defaultLogger.methodFactory\n            );\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","__globalThis","parcelHelpers","_firebase","_firestore","_loglevel","_loglevelDefault","interopDefault","document","addEventListener","bookForm","getElementById","bookList","searchBar","filterGenre","editModal","editForm","closeModalBtn","querySelector","deleteModal","confirmDeleteBtn","cancelDeleteBtn","currentBookId","currentDeleteBookId","addBook","title","author","genre","rating","docRef","addDoc","collection","db","default","info","loadBooks","error","innerHTML","booksCollection","books","bookSnapshot","getDocs","docs","map","doc","data","console","log","forEach","book","displayBook","li","createElement","appendChild","deleteBook","bookId","deleteDoc","editBook","docSnap","getDoc","exists","bookData","value","style","display","filterBooks","searchText","toLowerCase","selectedGenre","filteredBooks","filter","matchesSearch","includes","matchesGenre","event","target","e","preventDefault","updatedTitle","trim","updatedAuthor","updatedGenre","updatedRating","updateDoc","reset","classList","contains","getAttribute","debug","definition","noop","undefinedType","isIE","navigator","test","userAgent","logMethods","_loggersByName","defaultLogger","bindMethod","obj","methodName","method","Function","prototype","apply","arguments","traceForIE","trace","replaceLoggingMethods","level","getLevel","methodFactory","levels","SILENT","enableLoggingWhenConsoleArrives","defaultMethodFactory","_level","_loggerName","realMethod","undefined","Logger","factory","inheritedLevel","defaultLevel","userLevel","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","cookieName","encodeURIComponent","location","indexOf","exec","slice","normalizeLevel","input","toUpperCase","TypeError","setLevel","persist","persistLevelIfPossible","levelNum","levelName","setDefaultLevel","resetLevel","clearPersistedLevel","removeItem","enableAll","TRACE","disableAll","rebuild","childName","initialLevel","getLogger","logger","_log","noConflict","getLoggers","root"],"version":3,"file":"index.ee2f23a5.js.map"}
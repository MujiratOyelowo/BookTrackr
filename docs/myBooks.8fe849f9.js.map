{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,ECAA,IAAA,EAAA,EAAA,oBACA,EAAA,EAAA,0BACA,EAAA,EAAA,sBAEA,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,IAAM,EAAW,SAAS,cAAc,CAAC,YACnC,EAAY,SAAS,cAAc,CAAC,aACpC,EAAc,SAAS,cAAc,CAAC,eAEtC,EAAmB,SAAS,cAAc,CAAC,cAG3C,EAAY,SAAS,cAAc,CAAC,aACpC,EAAW,SAAS,cAAc,CAAC,YACnC,EAAgB,SAAS,aAAa,CAAC,cAGvC,EAAc,SAAS,cAAc,CAAC,eACtC,EAAmB,SAAS,cAAc,CAAC,iBAC3C,EAAkB,SAAS,cAAc,CAAC,gBAG5C,EAAgB,KAChB,EAAsB,KAG1B,eAAe,IACb,EAAS,SAAS,CAAG,GACrB,IAAM,EAAkB,AAAA,CAAA,EAAA,EAAA,UAAS,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","sources":["<anon>","assets/scripts/myBooks.js","assets/scripts/filterBooks.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"g5uBP\":[function(require,module,exports,__globalThis) {\nvar _filterBooksJs = require(\"./filterBooks.js\");\nvar _firebaseJs = require(\"../scripts/firebase.js\");\nvar _firestore = require(\"firebase/firestore\");\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const bookList = document.getElementById(\"bookList\");\n    const searchBar = document.getElementById(\"searchBar\");\n    const filterGenre = document.getElementById(\"filterGenre\");\n    const organizeBySelect = document.getElementById(\"organizeBy\"); // Organize dropdown on My Books page\n    // Modal elements for editing\n    const editModal = document.getElementById(\"editModal\");\n    const editForm = document.getElementById(\"editForm\");\n    const closeModalBtn = document.querySelector(\".close-btn\");\n    // Modal elements for delete confirmation\n    const deleteModal = document.getElementById(\"deleteModal\");\n    const confirmDeleteBtn = document.getElementById(\"confirmDelete\");\n    const cancelDeleteBtn = document.getElementById(\"cancelDelete\");\n    // Variables to store current book id being edited or deleted\n    let currentBookId = null;\n    let currentDeleteBookId = null;\n    // Load books function with ordering\n    async function loadBooks() {\n        bookList.innerHTML = \"\";\n        const booksCollection = (0, _firestore.collection)((0, _firebaseJs.db), \"books\");\n        const bookSnapshot = await (0, _firestore.getDocs)(booksCollection);\n        let books = bookSnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        // Apply ordering based on dropdown value (if it exists)\n        if (organizeBySelect) {\n            const criteria = organizeBySelect.value;\n            if (criteria === \"genre\") books = books.sort((a, b)=>a.genre.localeCompare(b.genre));\n            else if (criteria === \"author\") books = books.sort((a, b)=>a.author.localeCompare(b.author));\n        }\n        books.forEach((book)=>{\n            // Create a list item with Edit/Delete buttons\n            const li = document.createElement(\"li\");\n            li.innerHTML = `\n        <span><strong>${book.title}</strong> by ${book.author} (${book.genre}) \\u{2B50}${book.rating}</span>\n        <button class=\"edit-btn\" data-id=\"${book.id}\">Edit</button>\n        <button class=\"delete-btn\" data-id=\"${book.id}\">Delete</button>\n      `;\n            bookList.appendChild(li);\n        });\n    }\n    // Delete a book\n    async function deleteBook(bookId) {\n        try {\n            await (0, _firestore.deleteDoc)((0, _firestore.doc)((0, _firebaseJs.db), \"books\", bookId));\n            console.log(\"Book deleted:\", bookId);\n            loadBooks();\n        } catch (error) {\n            console.error(\"Error deleting book:\", error);\n        }\n    }\n    // Deleting Confirmation Modal Handlers\n    confirmDeleteBtn.addEventListener(\"click\", ()=>{\n        if (currentDeleteBookId) {\n            deleteBook(currentDeleteBookId);\n            currentDeleteBookId = null;\n        }\n        deleteModal.style.display = \"none\";\n    });\n    cancelDeleteBtn.addEventListener(\"click\", ()=>{\n        currentDeleteBookId = null;\n        deleteModal.style.display = \"none\";\n    });\n    // Opening the edit modal for a book\n    async function editBook(bookId) {\n        try {\n            const docRef = (0, _firestore.doc)((0, _firebaseJs.db), \"books\", bookId);\n            const docSnap = await (0, _firestore.getDoc)(docRef);\n            if (docSnap.exists()) {\n                const bookData = docSnap.data();\n                currentBookId = bookId;\n                // Populate modal form with existing data\n                document.getElementById(\"editTitle\").value = bookData.title;\n                document.getElementById(\"editAuthor\").value = bookData.author;\n                document.getElementById(\"editGenre\").value = bookData.genre;\n                document.getElementById(\"editRating\").value = bookData.rating;\n                // Displaying the modal\n                editModal.style.display = \"block\";\n            } else console.log(\"Book doesn't exist!\");\n        } catch (error) {\n            console.error(\"Error fetching book for edit:\", error);\n        }\n    }\n    // Handling modal edit form submission\n    editForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        const updatedTitle = document.getElementById(\"editTitle\").value.trim();\n        const updatedAuthor = document.getElementById(\"editAuthor\").value.trim();\n        const updatedGenre = document.getElementById(\"editGenre\").value;\n        const updatedRating = document.getElementById(\"editRating\").value;\n        try {\n            const docRef = (0, _firestore.doc)((0, _firebaseJs.db), \"books\", currentBookId);\n            await (0, _firestore.updateDoc)(docRef, {\n                title: updatedTitle,\n                author: updatedAuthor,\n                genre: updatedGenre,\n                rating: updatedRating\n            });\n            console.log(\"Book updated:\", currentBookId);\n            editModal.style.display = \"none\";\n            loadBooks();\n        } catch (error) {\n            console.error(\"Error updating book:\", error);\n        }\n    });\n    // Closing the edit modal when the close button is clicked\n    closeModalBtn.addEventListener(\"click\", ()=>{\n        editModal.style.display = \"none\";\n    });\n    // closing modals when clicking outside their content\n    window.addEventListener(\"click\", (event)=>{\n        if (event.target === editModal) editModal.style.display = \"none\";\n        if (event.target === deleteModal) deleteModal.style.display = \"none\";\n    });\n    // Event delegation for Edit and Delete buttons in the book list\n    bookList.addEventListener(\"click\", (e)=>{\n        if (e.target.classList.contains(\"delete-btn\")) {\n            // Instead of immediately deleting, show the delete confirmation modal\n            currentDeleteBookId = e.target.getAttribute(\"data-id\");\n            deleteModal.style.display = \"block\";\n        } else if (e.target.classList.contains(\"edit-btn\")) {\n            const bookId = e.target.getAttribute(\"data-id\");\n            editBook(bookId);\n        }\n    });\n    // Adding an event listener for the organizeBy dropdown to reload books when changed\n    if (organizeBySelect) organizeBySelect.addEventListener(\"change\", ()=>{\n        loadBooks();\n    });\n    async function applyFilters() {\n        const searchText = searchBar.value.toLowerCase();\n        const selectedGenre = filterGenre.value;\n        await (0, _filterBooksJs.filterAndDisplayBooks)(searchText, selectedGenre, bookList);\n    }\n    if (searchBar) searchBar.addEventListener(\"input\", applyFilters);\n    if (filterGenre) filterGenre.addEventListener(\"change\", applyFilters);\n    //calling applyFilters() on page load to display all books if filters are empty\n    applyFilters();\n    // Initial load of books\n    loadBooks();\n});\n\n},{\"./filterBooks.js\":\"11t4W\",\"../scripts/firebase.js\":\"6JwWS\",\"firebase/firestore\":\"59KHr\"}],\"11t4W\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"filterAndDisplayBooks\", ()=>filterAndDisplayBooks);\nvar _firestore = require(\"firebase/firestore\");\nvar _firebaseJs = require(\"./firebase.js\");\nasync function filterAndDisplayBooks(searchText, selectedGenre, bookList) {\n    try {\n        const booksCollection = (0, _firestore.collection)((0, _firebaseJs.db), \"books\");\n        const snapshot = await (0, _firestore.getDocs)(booksCollection);\n        const books = snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        // If no filters, show all books:\n        const filteredBooks = books.filter((book)=>{\n            const matchesSearch = book.title.toLowerCase().includes(searchText) || book.author.toLowerCase().includes(searchText);\n            const matchesGenre = selectedGenre ? book.genre === selectedGenre : true;\n            return matchesSearch && matchesGenre;\n        });\n        // Clearing the list\n        bookList.innerHTML = \"\";\n        // Directly updating the DOM\n        filteredBooks.forEach((book)=>{\n            const li = document.createElement(\"li\");\n            li.innerHTML = `\n        <span><strong>${book.title}</strong> by ${book.author} (${book.genre}) \\u{2B50}${book.rating}</span>\n        <button class=\"edit-btn\" data-id=\"${book.id}\">Edit</button>\n        <button class=\"delete-btn\" data-id=\"${book.id}\">Delete</button>\n      `;\n            bookList.appendChild(li);\n        });\n    } catch (error) {\n        console.error(\"Error filtering books:\", error);\n    }\n}\n\n},{\"firebase/firestore\":\"59KHr\",\"./firebase.js\":\"6JwWS\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[\"g5uBP\"], \"g5uBP\", \"parcelRequire94c2\")\n\n//# sourceMappingURL=myBooks.8fe849f9.js.map\n","import { filterAndDisplayBooks } from \"./filterBooks.js\";\nimport { db } from \"../scripts/firebase.js\";\nimport { collection, getDocs, doc, deleteDoc, getDoc, updateDoc } from \"firebase/firestore\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const bookList = document.getElementById(\"bookList\");\n  const searchBar = document.getElementById(\"searchBar\");\n  const filterGenre = document.getElementById(\"filterGenre\");\n\n  const organizeBySelect = document.getElementById(\"organizeBy\"); // Organize dropdown on My Books page\n\n  // Modal elements for editing\n  const editModal = document.getElementById(\"editModal\");\n  const editForm = document.getElementById(\"editForm\");\n  const closeModalBtn = document.querySelector(\".close-btn\");\n\n  // Modal elements for delete confirmation\n  const deleteModal = document.getElementById(\"deleteModal\");\n  const confirmDeleteBtn = document.getElementById(\"confirmDelete\");\n  const cancelDeleteBtn = document.getElementById(\"cancelDelete\");\n\n  // Variables to store current book id being edited or deleted\n  let currentBookId = null;\n  let currentDeleteBookId = null;\n\n  // Load books function with ordering\n  async function loadBooks() {\n    bookList.innerHTML = \"\";\n    const booksCollection = collection(db, \"books\");\n    const bookSnapshot = await getDocs(booksCollection);\n    let books = bookSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n\n    // Apply ordering based on dropdown value (if it exists)\n    if (organizeBySelect) {\n      const criteria = organizeBySelect.value;\n      if (criteria === \"genre\") {\n        books = books.sort((a, b) => a.genre.localeCompare(b.genre));\n      } else if (criteria === \"author\") {\n        books = books.sort((a, b) => a.author.localeCompare(b.author));\n      }\n    }\n\n    books.forEach(book => {\n      // Create a list item with Edit/Delete buttons\n      const li = document.createElement(\"li\");\n      li.innerHTML = `\n        <span><strong>${book.title}</strong> by ${book.author} (${book.genre}) ⭐${book.rating}</span>\n        <button class=\"edit-btn\" data-id=\"${book.id}\">Edit</button>\n        <button class=\"delete-btn\" data-id=\"${book.id}\">Delete</button>\n      `;\n      bookList.appendChild(li);\n    });\n  }\n\n  // Delete a book\n  async function deleteBook(bookId) {\n    try {\n      await deleteDoc(doc(db, \"books\", bookId));\n      console.log(\"Book deleted:\", bookId);\n      loadBooks();\n    } catch (error) {\n      console.error(\"Error deleting book:\", error);\n    }\n  }\n\n  // Deleting Confirmation Modal Handlers\n  confirmDeleteBtn.addEventListener(\"click\", () => {\n    if (currentDeleteBookId) {\n      deleteBook(currentDeleteBookId);\n      currentDeleteBookId = null;\n    }\n    deleteModal.style.display = \"none\";\n  });\n\n  cancelDeleteBtn.addEventListener(\"click\", () => {\n    currentDeleteBookId = null;\n    deleteModal.style.display = \"none\";\n  });\n\n  // Opening the edit modal for a book\n  async function editBook(bookId) {\n    try {\n      const docRef = doc(db, \"books\", bookId);\n      const docSnap = await getDoc(docRef);\n      if (docSnap.exists()) {\n        const bookData = docSnap.data();\n        currentBookId = bookId;\n        // Populate modal form with existing data\n        document.getElementById(\"editTitle\").value = bookData.title;\n        document.getElementById(\"editAuthor\").value = bookData.author;\n        document.getElementById(\"editGenre\").value = bookData.genre;\n        document.getElementById(\"editRating\").value = bookData.rating;\n        // Displaying the modal\n        editModal.style.display = \"block\";\n      } else {\n        console.log(\"Book doesn't exist!\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching book for edit:\", error);\n    }\n  }\n\n  // Handling modal edit form submission\n  editForm.addEventListener(\"submit\", async (e) => {\n    e.preventDefault();\n    const updatedTitle = document.getElementById(\"editTitle\").value.trim();\n    const updatedAuthor = document.getElementById(\"editAuthor\").value.trim();\n    const updatedGenre = document.getElementById(\"editGenre\").value;\n    const updatedRating = document.getElementById(\"editRating\").value;\n    try {\n      const docRef = doc(db, \"books\", currentBookId);\n      await updateDoc(docRef, {\n        title: updatedTitle,\n        author: updatedAuthor,\n        genre: updatedGenre,\n        rating: updatedRating\n      });\n      console.log(\"Book updated:\", currentBookId);\n      editModal.style.display = \"none\";\n      loadBooks();\n    } catch (error) {\n      console.error(\"Error updating book:\", error);\n    }\n  });\n\n  // Closing the edit modal when the close button is clicked\n  closeModalBtn.addEventListener(\"click\", () => {\n    editModal.style.display = \"none\";\n  });\n\n  // closing modals when clicking outside their content\n  window.addEventListener(\"click\", (event) => {\n    if (event.target === editModal) {\n      editModal.style.display = \"none\";\n    }\n    if (event.target === deleteModal) {\n      deleteModal.style.display = \"none\";\n    }\n  });\n\n  // Event delegation for Edit and Delete buttons in the book list\n  bookList.addEventListener(\"click\", (e) => {\n    if (e.target.classList.contains(\"delete-btn\")) {\n      // Instead of immediately deleting, show the delete confirmation modal\n      currentDeleteBookId = e.target.getAttribute(\"data-id\");\n      deleteModal.style.display = \"block\";\n    } else if (e.target.classList.contains(\"edit-btn\")) {\n      const bookId = e.target.getAttribute(\"data-id\");\n      editBook(bookId);\n    }\n  });\n\n  // Adding an event listener for the organizeBy dropdown to reload books when changed\n  if (organizeBySelect) {\n    organizeBySelect.addEventListener(\"change\", () => {\n      loadBooks();\n    });\n  }\n\n  async function applyFilters() {\n    const searchText = searchBar.value.toLowerCase();\n    const selectedGenre = filterGenre.value;\n    await filterAndDisplayBooks(searchText, selectedGenre, bookList);\n  }\n\n  if (searchBar) {\n    searchBar.addEventListener(\"input\", applyFilters);\n  }\n  if (filterGenre) {\n    filterGenre.addEventListener(\"change\", applyFilters);\n  }\n  \n  //calling applyFilters() on page load to display all books if filters are empty\n  applyFilters();\n  // Initial load of books\n  loadBooks();\n});","import { collection, getDocs } from \"firebase/firestore\";\nimport { db } from \"./firebase.js\";\n\nexport async function filterAndDisplayBooks(searchText, selectedGenre, bookList) {\n  try {\n    const booksCollection = collection(db, \"books\");\n    const snapshot = await getDocs(booksCollection);\n    const books = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n    \n    // If no filters, show all books:\n    const filteredBooks = books.filter(book => {\n      const matchesSearch = book.title.toLowerCase().includes(searchText) ||\n                            book.author.toLowerCase().includes(searchText);\n      const matchesGenre = selectedGenre ? book.genre === selectedGenre : true;\n      return matchesSearch && matchesGenre;\n    });\n\n    // Clearing the list\n    bookList.innerHTML = \"\";\n\n    // Directly updating the DOM\n    filteredBooks.forEach(book => {\n      const li = document.createElement(\"li\");\n      li.innerHTML = `\n        <span><strong>${book.title}</strong> by ${book.author} (${book.genre}) ⭐${book.rating}</span>\n        <button class=\"edit-btn\" data-id=\"${book.id}\">Edit</button>\n        <button class=\"delete-btn\" data-id=\"${book.id}\">Delete</button>\n      `;\n      bookList.appendChild(li);\n    });\n  } catch (error) {\n    console.error(\"Error filtering books:\", error);\n  }\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","__globalThis","_filterBooksJs","_firebaseJs","_firestore","document","addEventListener","bookList","getElementById","searchBar","filterGenre","organizeBySelect","editModal","editForm","closeModalBtn","querySelector","deleteModal","confirmDeleteBtn","cancelDeleteBtn","currentBookId","currentDeleteBookId","loadBooks","innerHTML","booksCollection","collection","db","books","bookSnapshot","getDocs","docs","map","doc","data","criteria","value","sort","a","b","genre","localeCompare","author","forEach","book","li","createElement","title","rating","appendChild","deleteBook","bookId","deleteDoc","console","log","error","editBook","docRef","docSnap","getDoc","exists","bookData","style","display","applyFilters","searchText","toLowerCase","selectedGenre","filterAndDisplayBooks","e","preventDefault","updatedTitle","trim","updatedAuthor","updatedGenre","updatedRating","updateDoc","event","target","classList","contains","getAttribute","parcelHelpers","defineInteropFlag","export","filteredBooks","snapshot","filter","matchesSearch","includes","matchesGenre"],"version":3,"file":"myBooks.8fe849f9.js.map"}